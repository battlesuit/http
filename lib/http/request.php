<?php
namespace http;
use http\transaction\Env;

/**
 * Standard http request message with some required helpers
 *
 * PHP Version 5.3+
 * @author Thomas Monzel <tm@apparat-hamburg.de>
 * @version $Revision$
 * @package Battlesuit
 * @subpackage http
 */
class Request extends Message {
  
  /**
   * The requested method e.g get, post
   * 
   * @access private
   * @var string
   */
  private $method = 'get';
  
  /**
   * The full requested url e.g http://domain.de/foo/bar.php?name=tom
   * 
   * @access private
   * @var string
   */
  private $url = 'http://localhost:80';
  
  /**
   * An url components array splitted by parse_url()
   * Can contain the following keys:
   * scheme - e.g. http
   * host
   * port
   * user
   * pass
   * path
   * query - after the question mark ?
   * fragment - after the hashmark #
   * 
   * @access private
   * @link http://de.php.net/manual/en/function.parse-url.php
   * @var array
   */
  private $url_components = array(
    'scheme' => '',
    'host' => '',
    'port' => '',
    'user' => '',
    'pass' => '',
    'path' => '',
    'query' => '',
    'fragment' => '',
    
    # internal additions
    'file' => '',
    
   /**
    * Stores the path_info generated by path_info() reader
    * The path info contains the string between the script_url and the query string
    * e.g http://domain.de/foo/bar.php(/path/info)?id=12
    * Always starts with a slash
    */
    'path_info' => ''
  );
  
  /**
   * Host url
   * http://domain.de
   *
   * @access private
   * @var string
   */
  protected $host_url;
  
  /**
   * Stores the script url generated by script_url() reader
   * e.g. http://domain.de/foo/bar.php
   *
   * @access private
   * @var string
   */
  protected $script_url;
  
  /**
   * Modified path without file and path_info
   *
   * @access private
   * @var string
   */
  protected $path = '';
  
  /**
   * Stores the request port number
   *
   * @access protected
   * @var int
   */
  protected $port;
  
  /**
   * Contains all query and post parameters
   *
   * @access public
   * @var array
   */
  public $data = array();
  
  /**
   * Contains all query parameters
   * e.g. foo.php?product=chair&height=2cm
   *
   * @access public
   * @var array
   */
  protected $query = array();
  protected $query_string;
  
  
  
  /**
   * 
   * 
   */
  public $env = array();
  
  /**
   * Constructs a new request instance
   * If the data array or the query contains the _method param the method gets
   * overridden.
   *
   * Default headerfields:
   *  content_length = query-length
   *  accept = *\/*
   * 
   * @access public
   * @param mixed $url_or_env
   * @param string $method
   * @param array $input
   * @param array $fields Headerfields
   */
  function __construct($url_or_env = null, $method = null, array $input = array(), array $fields = array()) {
    if(is_string($url_or_env)) {
      $url = $url_or_env;
    } elseif($url_or_env instanceof Env) $this->apply_env($url_or_env);
    
    if(!empty($url)) $this->url = $url;
    $this->data = $input;
    $this->prepare_url_components();

    # override method with data param
    if(!empty($this->data['_method'])) $this->method = strtolower($this->data['_method']);
    elseif(!empty($method)) $this->method = strtolower($method);
    
    # set content length headerfield if there is any data and its not defined by user
    if(!empty($this->data) and empty($fields['content_length'])) {
      $fields['content_length'] = strlen(http_build_query($this->data));
    }
    
    $this->fields($fields);
  }
  
  /**
   * Maps all url components extracted by parse_url() to this request
   *
   * @access protected
   */
  protected function prepare_url_components() {
    $components = parse_url($this->url);
    extract($components);

    # find url file if there is any
    if(!empty($path) and ($dot_pos = strrpos($path, '.php')) !== false) {
      $after_dot = substr($path, $dot_pos+1);
      
      if(($path_info = strstr($after_dot, '/')) !== false) {
        $components['path_info'] = $path_info;
        $path = substr($path, 0, strrpos($path, $path_info));
        
      }
      
      $components['file'] = basename($path);
     
      $this->path = str_replace(DIRECTORY_SEPARATOR, '/', dirname($path));

    } elseif(!empty($path)) $this->path = $path;
    
    # merge query with data array
    if(!empty($query)) {
      $this->query_string = $query;
      parse_str($query, $query_data);
      $this->query = $query_data;
      $this->data = array_merge($query_data, $this->data);
    }
    
    if(!empty($port)) {
      $this->port = $port;
    }
    
    if(!empty($scheme) and !empty($host)) {
      $this->host_url = "$scheme://$host";
    }
    
    $this->url_components = array_merge($this->url_components, $components);
  }
  
  /**
   * Applies a environment
   *
   * @access public
   * @param Env $env
   */
  function apply_env(Env $env) {
    $this->env = $env;
    list($method, $url, $input, $fields) = $env->request;
    $this->__construct($url, $method, $input, $fields);
  }
  
  /**
   * Reads the request method
   * 
   * @access public
   * @return string
   */
  function method() {
    return $this->method;
  }
  
  /**
   * Reads the requested url
   *
   * @access public
   * @return string
   */
  function url() {
    return $this->url;
  }
  
  /**
   * Reads the requested url-info array
   *
   * @access public
   * @return array
   */  
  function url_components() {
    return $this->url_components;
  }
  
  /**
   * Returns the url scheme e.g. http, ftp, https etc.
   *
   * @access public
   * @return string
   */
  function scheme() {
    return $this->url_components['scheme'];
  }
  
  /**
   * Returns the requests file if present
   *
   * @access public
   * @return string
   */
  function file() {
    return $this->url_components['file'];
  }
  
  /**
   * Returns the requests path_info if present
   * 
   * @access public
   * @return string
   */
  function path_info() {
    return $this->url_components['path_info'];
  }
  
  function query() {
    return $this->query;
  }
  
  function query_string() {
    return $this->query_string;
  }
  
  /**
   * Resource paths are either the PATH_INFO or if not present the requests path value 
   *
   * http://localhost/my/path/to/resource.php(/my/path/to)
   * or
   * http://localhost(/my/path/to)
   * 
   */
  function resource_path() {
    $path_info = $this->path_info();
    if(!empty($path_info)) return $path_info;
    else if(empty($this->path)) return '/';
    
    return $this->path;
  }
  
  /**
   * Returns the request port number
   *
   * @access public
   * @return int
   */
  function port() {
    return $this->port;
  }
  
  /**
   * Generates and reads the request script url
   *
   * @access public
   * @return string
   */
  function script_url() {
    if(isset($this->script_url)) return $this->script_url;
    
    $file = $this->file();
    $path = $this->path == '/' ? '' : $this->path;
    
    return $this->script_url = $this->host_url.$path.(!empty($file) ? "/$file" : '');
  }
  
  function base_url() {
    return $this->host_url.($this->path == '/' ? '' : $this->path);
  }
  
  /**
   * Reads the scripts base-url
   *
   * @access public
   * @return string
   */
  function host_url($include_port = false) {
    return $this->host_url.(($include_port and !empty($this->port)) ? ":$this->port" : '');
  }
  
  /**
   * Returns the urls path for this request
   *
   * @access public
   * @return string
   */
  function path() {
    return $this->path;
  }
  
  /**
   * Retrieves all accepted mime types as an array
   * 
   * @access public
   * @return array
   */
  function accepted_mimes() {
    if(isset($this['accept'])) {
      preg_match_all('#[a-z-\*]+/[a-z-\*]+#', $this['accept'], $matches);
      if(isset($matches[0])) return $matches[0];
    }
    
    return array();
  }
  
  /**
   * Accepting a given mime type
   *
   * @access public
   * @param string $mime
   * @return boolean
   */
  function accepts_mime($mime) {
    $mimes = $this->accepted_mimes();
    
    foreach($mimes as $m) {
      $mime_regex = "#".str_replace('*', '(.+)', $m)."#";
      if(preg_match($mime_regex, $mime) === 1) return true;
    }
    
    return false;
  }
  
  /**
   * Accepts a given format e.g. xml, html, json, js
   *
   * @access public
   * @param string $format
   * @return boolean
   */
  function accepts_format($format) {
    $mimes = $this->accepted_mimes();
    if(array_key_exists($format, static::$formats)) {
      $map = (array)static::$formats[$format];
      foreach($map as $mime) {
        if($this->accepts_mime($mime)) return true;
      }
    }
    
    return false;
  }
  
  /**
   * Does this request equals a given method type? e.g. get, post, delete, put
   *
   * @access public
   * @param $method
   * @return boolean
   */
  function via($method) {
    return $this->method === strtolower($method);
  }
  
  /**
   * Is this request sent via get?
   *
   * @access public
   * @return boolean
   */
  function via_get() {
    return $this->via('get');
  }
  
  /**
   * Is this request sent via post?
   *
   * @access public
   * @return boolean
   */  
  function via_post() {
    return $this->via('post');
  }
  
  /**
   * Is this request sent via put?
   *
   * @access public
   * @return boolean
   */  
  function via_put() {
    return $this->via('put');
  }
  
  /**
   * Is this request sent via delete?
   *
   * @access public
   * @return boolean
   */  
  function via_delete() {
    return $this->via('delete');
  }
  
  /**
   * Is this request sent via head?
   *
   * @access public
   * @return boolean
   */  
  function via_head() {
    return $this->via('head');
  }
  
  /**
   * Is this request a xml-http
   *
   * @access public
   * @return boolean
   */
  function xhr() {
    return isset($this['HTTP_X_REQUESTED_WITH']) and $this['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest';
  }
  
  /**
   * To-string conversion returns something like "POST http://domain.de/foo.php"
   *
   * @access public
   * @return string
   */ 
  function __toString() {
    return strtoupper($this->method())." $this->url";
  }
  
  /**
   * Array representation
   *
   * @access public
   * @return array
   */
  function to_array() {
    return array($this->method(), $this->url(), $this->data, $this->fields());
  }
}
?>